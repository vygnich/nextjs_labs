generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String?    @unique
  emailVerified    DateTime?
  image            String?
  dateOfBirth      DateTime?
  successPurchases Int?
  failPurchases    Int?
  bonuses          Int?
  accounts         Account[]
  sessions         Session[]
  orders           Order[]
  feedbacks        Feedback[]
  carts            Cart[]
  favorites        Favorite[]
  role             UserRole   @default(USER)

  @@index([id])
  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id            String          @id @default(cuid())
  number        Int             @unique @default(autoincrement())
  price         Float
  notes         String?
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  orderProducts OrderProducts[]

  @@index([id])
  @@index([userId])
}

model OrderProducts {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  count     Int
}

model Product {
  id            String          @id @default(cuid())
  title         String          @unique
  description   String?
  photo         String?
  price         Float
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    String
  feedback      Feedback[]
  orderProducts OrderProducts[]
  Cart          Cart[]
  Favorite      Favorite[]

  @@index([title])
}

model Category {
  id          String    @id @default(cuid())
  title       String    @unique
  description String?
  photo       String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([title])
}

model Feedback {
  id        String   @id @default(cuid())
  text      String
  rating    Int?
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Cart {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  count     Int
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Favorite {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
